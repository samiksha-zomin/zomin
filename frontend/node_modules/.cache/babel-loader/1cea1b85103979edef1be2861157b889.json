{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  return {\n    value: enteredValue,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler\n  };\n};\n\n_s(useInput, \"ukuK34W1DYCeNUzai/YO8eTBCYY=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/samikshazomin/Desktop/zomin/frontend/src/Hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAAEC,YAAF,EAAiBC,eAAjB,IAAqCJ,QAAQ,CAAC,EAAD,CAAnD;AACA,QAAM,CAAEK,SAAF,EAAcC,YAAd,IAA+BN,QAAQ,CAAC,KAAD,CAA7C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAChCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,SAAO;AACHM,IAAAA,KAAK,EAAET,YADJ;AAEHK,IAAAA,QAFG;AAGHC,IAAAA,kBAHG;AAIHI,IAAAA;AAJG,GAAP;AAOH,CAtBD;;GAAMZ,Q;;AAwBN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react';\n\nconst useInput = (validateValue) => {\n    const [ enteredValue , setEnteredValue ] = useState(\"\");\n    const [ isTouched , setIsTouched ] = useState(false);\n\n    const valueIsValid = validateValue(enteredValue);\n    const hasError = !valueIsValid && isTouched;\n\n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n    };\n\n    const inputBlurHandler = (event) => {\n        setIsTouched(true);\n    };\n\n    return {\n        value: enteredValue,\n        hasError,\n        valueChangeHandler,\n        inputBlurHandler\n    };\n\n};\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/samikshazomin/Desktop/zomin/frontend/src/Components/Settings/Password.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from \"react\";\nimport Axios from \"axios\";\nimport { Col, Form } from \"react-bootstrap\";\nimport { BiChevronLeft } from \"react-icons/bi\";\nimport { BsEyeFill, BsEyeSlashFill } from \"react-icons/bs\";\nimport { BiError, BiMessageCheck, BiMinusCircle } from \"react-icons/bi\";\nimport Heading from \"../Heading\";\nimport useInput from \"../../Helpers/use-input\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotPassword = value => value.match(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,30}$/);\n\nfunction Password({\n  setshowSubContentClick\n}) {\n  _s();\n\n  const [currentPassword, setCurrentPassword] = useState(false);\n  const [newPassword, setNewPassword] = useState(false);\n  const [confirmPassword, setConfirmPassword] = useState(false);\n\n  const toggleCurrentPassword = () => {\n    setCurrentPassword(!currentPassword);\n  };\n\n  const toggleNewPassword = () => {\n    setNewPassword(!newPassword);\n  };\n\n  const toggleConfirmPassword = () => {\n    setConfirmPassword(!confirmPassword);\n  }; // Current Password Input Check\n\n\n  const {\n    value: enteredCurrentPassword,\n    isValid: enteredCurrentPasswordIsValid,\n    hasError: currentPasswordInputHasError,\n    valueChangeHandler: currentPasswordChangeHandler,\n    inputBlurHandler: currentPasswordBlurHandler,\n    reset: resetCurrentPasswordInput\n  } = useInput(isNotPassword); // New Password Input Check\n\n  const {\n    value: enteredNewPassword,\n    isValid: enteredNewPasswordIsValid,\n    hasError: newPasswordInputHasError,\n    valueChangeHandler: newPasswordChangeHandler,\n    inputBlurHandler: newPasswordBlurHandler,\n    reset: resetNewPasswordInput\n  } = useInput(isNotPassword); // Confirm Password Input Check\n\n  const {\n    value: enteredConfirmPassword,\n    isValid: enteredConfirmPasswordIsValid,\n    hasError: confirmPasswordInputHasError,\n    valueChangeHandler: confirmPasswordChangeHandler,\n    inputBlurHandler: confirmPasswordBlurHandler,\n    reset: resetConfirmPasswordInput\n  } = useInput(isNotPassword);\n  let changePasswordIsValid = false;\n\n  if (enteredCurrentPassword && enteredNewPassword && enteredConfirmPassword) {\n    changePasswordIsValid = true;\n  }\n\n  const changePasswordFormSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (enteredNewPassword !== enteredConfirmPassword) {\n      return toast.warn( /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(BiError, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"New Password and Confirm Password does not match!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this));\n    } else {\n      if (!enteredCurrentPasswordIsValid && !enteredNewPasswordIsValid && !enteredConfirmPasswordIsValid) {\n        return;\n      } else {\n        Axios.post(`${process.env.REACT_APP_SERVER_DOMAIN}/settings/password`, {\n          currentPassword: enteredCurrentPassword,\n          newPassword: enteredNewPassword,\n          confirmPassword: enteredConfirmPassword\n        }, {\n          headers: {\n            accessToken: localStorage.getItem(\"accessToken\")\n          }\n        }).then(response => {\n          if (response.data.error) {\n            return toast.error( /*#__PURE__*/_jsxDEV(Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(BiMinusCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 25\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: response.data.error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 43\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 23\n            }, this));\n          } else if (response.data.warn) {\n            return toast.warn( /*#__PURE__*/_jsxDEV(Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(BiError, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 25\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: response.data.warn\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 23\n            }, this));\n          } else {\n            return toast.success( /*#__PURE__*/_jsxDEV(Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(BiMessageCheck, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 27\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: response.data.success\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 46\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 25\n            }, this));\n          }\n        });\n      }\n\n      resetCurrentPasswordInput();\n      resetNewPasswordInput();\n      resetConfirmPasswordInput();\n    }\n  };\n\n  const currentPasswordClasses = currentPasswordInputHasError ? \"form-control form-control-sm is-invalid\" : \"form-control form-control-sm\";\n  const newPasswordClasses = newPasswordInputHasError ? \"form-control form-control-sm is-invalid\" : \"form-control form-control-sm\";\n  const confirmPasswordClasses = confirmPasswordInputHasError ? \"form-control form-control-sm is-invalid\" : \"form-control form-control-sm\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: () => setshowSubContentClick(0),\n      className: \"me-2 d-block d-sm-none\",\n      children: [/*#__PURE__*/_jsxDEV(BiChevronLeft, {\n        className: \"d-inline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        content: \"Password\",\n        design: \"h1 d-inline-block\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      lg: 10,\n      md: 12,\n      sm: 12,\n      className: \"mx-auto my-2\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        content: \"Change Password\",\n        design: \" h3 mb-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: changePasswordFormSubmissionHandler,\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          sm: 12,\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"studyField\",\n            className: \"required\",\n            children: \"Current Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: currentPassword ? \"text\" : \"password\",\n              className: currentPasswordClasses,\n              onChange: currentPasswordChangeHandler,\n              onBlur: currentPasswordBlurHandler,\n              value: enteredCurrentPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"input-group-text\",\n              onClick: toggleCurrentPassword,\n              children: currentPassword === true ? /*#__PURE__*/_jsxDEV(BsEyeFill, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(BsEyeSlashFill, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), currentPasswordInputHasError && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: \"Please fill in current password.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 12,\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"studyField\",\n            className: \"required\",\n            children: \"New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: newPassword ? \"text\" : \"password\",\n              className: newPasswordClasses,\n              onChange: newPasswordChangeHandler,\n              onBlur: newPasswordBlurHandler,\n              value: enteredNewPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"input-group-text\",\n              onClick: toggleNewPassword,\n              children: newPassword === true ? /*#__PURE__*/_jsxDEV(BsEyeFill, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(BsEyeSlashFill, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 57\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), newPasswordInputHasError && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: \"Must contain more than 8 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 12,\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"studyField\",\n            className: \"required\",\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: confirmPassword ? \"text\" : \"password\",\n              className: confirmPasswordClasses,\n              onChange: confirmPasswordChangeHandler,\n              onBlur: confirmPasswordBlurHandler,\n              value: enteredConfirmPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"input-group-text\",\n              onClick: toggleConfirmPassword,\n              children: confirmPassword === true ? /*#__PURE__*/_jsxDEV(BsEyeFill, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(BsEyeSlashFill, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), confirmPasswordInputHasError && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: \"Must contain more than 8 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"text-end\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary\",\n            disabled: !changePasswordIsValid,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Password, \"f9WqqUOhEm4TYkJlISrXc8hcAxo=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = Password;\nexport default Password;\n\nvar _c;\n\n$RefreshReg$(_c, \"Password\");","map":{"version":3,"sources":["/Users/samikshazomin/Desktop/zomin/frontend/src/Components/Settings/Password.js"],"names":["React","useState","Fragment","Axios","Col","Form","BiChevronLeft","BsEyeFill","BsEyeSlashFill","BiError","BiMessageCheck","BiMinusCircle","Heading","useInput","toast","isNotPassword","value","match","Password","setshowSubContentClick","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","toggleCurrentPassword","toggleNewPassword","toggleConfirmPassword","enteredCurrentPassword","isValid","enteredCurrentPasswordIsValid","hasError","currentPasswordInputHasError","valueChangeHandler","currentPasswordChangeHandler","inputBlurHandler","currentPasswordBlurHandler","reset","resetCurrentPasswordInput","enteredNewPassword","enteredNewPasswordIsValid","newPasswordInputHasError","newPasswordChangeHandler","newPasswordBlurHandler","resetNewPasswordInput","enteredConfirmPassword","enteredConfirmPasswordIsValid","confirmPasswordInputHasError","confirmPasswordChangeHandler","confirmPasswordBlurHandler","resetConfirmPasswordInput","changePasswordIsValid","changePasswordFormSubmissionHandler","event","preventDefault","warn","post","process","env","REACT_APP_SERVER_DOMAIN","headers","accessToken","localStorage","getItem","then","response","data","error","success","currentPasswordClasses","newPasswordClasses","confirmPasswordClasses"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\nimport Axios from \"axios\";\nimport { Col, Form } from \"react-bootstrap\";\nimport { BiChevronLeft } from \"react-icons/bi\";\nimport { BsEyeFill, BsEyeSlashFill } from \"react-icons/bs\";\nimport { BiError, BiMessageCheck, BiMinusCircle } from \"react-icons/bi\";\n\n\nimport Heading from \"../Heading\";\n\nimport useInput from \"../../Helpers/use-input\";\nimport { toast } from \"react-toastify\";\n\nconst isNotPassword = (value) =>\n  value.match(\n    /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,30}$/\n  );\n\nfunction Password({ setshowSubContentClick }) {\n\n  const [currentPassword, setCurrentPassword] = useState(false);\n  const [newPassword, setNewPassword] = useState(false);\n  const [confirmPassword, setConfirmPassword] = useState(false);\n\n  const toggleCurrentPassword = () => {\n    setCurrentPassword(!currentPassword);\n  };\n\n  const toggleNewPassword = () => {\n    setNewPassword(!newPassword);\n  };\n\n  const toggleConfirmPassword = () => {\n    setConfirmPassword(!confirmPassword);\n  };\n\n  // Current Password Input Check\n  const {\n    value: enteredCurrentPassword,\n    isValid: enteredCurrentPasswordIsValid,\n    hasError: currentPasswordInputHasError,\n    valueChangeHandler: currentPasswordChangeHandler,\n    inputBlurHandler: currentPasswordBlurHandler,\n    reset: resetCurrentPasswordInput,\n  } = useInput(isNotPassword);\n\n  // New Password Input Check\n  const {\n    value: enteredNewPassword,\n    isValid: enteredNewPasswordIsValid,\n    hasError: newPasswordInputHasError,\n    valueChangeHandler: newPasswordChangeHandler,\n    inputBlurHandler: newPasswordBlurHandler,\n    reset: resetNewPasswordInput,\n  } = useInput(isNotPassword);\n\n  // Confirm Password Input Check\n  const {\n    value: enteredConfirmPassword,\n    isValid: enteredConfirmPasswordIsValid,\n    hasError: confirmPasswordInputHasError,\n    valueChangeHandler: confirmPasswordChangeHandler,\n    inputBlurHandler: confirmPasswordBlurHandler,\n    reset: resetConfirmPasswordInput,\n  } = useInput(isNotPassword);\n\n  let changePasswordIsValid = false;\n\n  if (enteredCurrentPassword && enteredNewPassword && enteredConfirmPassword) {\n    changePasswordIsValid = true;\n  }\n\n  const changePasswordFormSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    if(enteredNewPassword !== enteredConfirmPassword) {\n\n        return toast.warn(\n            <Fragment>\n              <BiError /> <span>New Password and Confirm Password does not match!</span>\n            </Fragment>\n          );\n\n    } else {\n        if (\n            !enteredCurrentPasswordIsValid &&\n            !enteredNewPasswordIsValid &&\n            !enteredConfirmPasswordIsValid\n          ) {\n            return;\n          } else {\n            Axios.post(\n                `${process.env.REACT_APP_SERVER_DOMAIN}/settings/password`,\n                {\n                    currentPassword: enteredCurrentPassword,\n                    newPassword: enteredNewPassword,\n                    confirmPassword: enteredConfirmPassword,\n                }, \n                {\n                    headers: {\n                        accessToken: localStorage.getItem(\"accessToken\"),\n                      },\n                }\n            ).then ((response) => {\n                if (response.data.error) {\n                    return toast.error(\n                      <Fragment>\n                        <BiMinusCircle /> <span>{response.data.error}</span>\n                      </Fragment>\n                    );\n                  } else if (response.data.warn) {\n                    return toast.warn(\n                      <Fragment>\n                        <BiError /> <span>{response.data.warn}</span>\n                      </Fragment>\n                    );\n                  } else {\n                    return toast.success(\n                        <Fragment>\n                          <BiMessageCheck /> <span>{response.data.success}</span>\n                        </Fragment>\n                      );\n                  }\n            })\n          }\n          resetCurrentPasswordInput();\n          resetNewPasswordInput();\n          resetConfirmPasswordInput();\n    }\n\n\n  };\n\n  const currentPasswordClasses = currentPasswordInputHasError\n    ? \"form-control form-control-sm is-invalid\"\n    : \"form-control form-control-sm\";\n\n  const newPasswordClasses = newPasswordInputHasError\n    ? \"form-control form-control-sm is-invalid\"\n    : \"form-control form-control-sm\";\n\n  const confirmPasswordClasses = confirmPasswordInputHasError\n    ? \"form-control form-control-sm is-invalid\"\n    : \"form-control form-control-sm\";\n\n  return (\n    <div>\n      <h1\n        onClick={() => setshowSubContentClick(0)}\n        className=\"me-2 d-block d-sm-none\"\n      >\n        <BiChevronLeft className=\"d-inline\" />\n        <Heading content=\"Password\" design=\"h1 d-inline-block\" />\n      </h1>\n      <Col lg={10} md={12} sm={12} className=\"mx-auto my-2\">\n        <Heading content=\"Change Password\" design=\" h3 mb-4\" />\n\n        <Form onSubmit={changePasswordFormSubmissionHandler}>\n          <Col sm={12} className=\"form-group mb-3\">\n            <label htmlFor=\"studyField\" className=\"required\">\n              Current Password\n            </label>\n            <div className=\"input-group mb-3\">\n              <input\n                type={currentPassword ? \"text\" : \"password\"}\n                className={currentPasswordClasses}\n                onChange={currentPasswordChangeHandler}\n                onBlur={currentPasswordBlurHandler}\n                value={enteredCurrentPassword}\n              />\n              <span\n                className=\"input-group-text\"\n                onClick={toggleCurrentPassword}\n              >\n                {currentPassword === true ? <BsEyeFill /> : <BsEyeSlashFill />}\n              </span>\n              {currentPasswordInputHasError && (\n                <Form.Control.Feedback type=\"invalid\">\n                  Please fill in current password.\n                </Form.Control.Feedback>\n              )}\n            </div>\n          </Col>\n\n          <Col sm={12} className=\"form-group mb-3\">\n            <label htmlFor=\"studyField\" className=\"required\">\n              New Password\n            </label>\n            <div className=\"input-group mb-3\">\n              <input\n                type={newPassword ? \"text\" : \"password\"}\n                className={newPasswordClasses}\n                onChange={newPasswordChangeHandler}\n                onBlur={newPasswordBlurHandler}\n                value={enteredNewPassword}\n              />\n              <span className=\"input-group-text\" onClick={toggleNewPassword}>\n                {newPassword === true ? <BsEyeFill /> : <BsEyeSlashFill />}\n              </span>\n\n              {newPasswordInputHasError && (\n                <Form.Control.Feedback type=\"invalid\">\n                Must contain more than 8 characters which contain at\n                          least one lowercase letter, one uppercase letter, one\n                          numeric digit, and one special character.\n                </Form.Control.Feedback>\n              )}\n            </div>\n          </Col>\n\n          <Col sm={12} className=\"form-group mb-3\">\n            <label htmlFor=\"studyField\" className=\"required\">\n              Confirm Password\n            </label>\n            <div className=\"input-group mb-3\">\n              <input\n                type={confirmPassword ? \"text\" : \"password\"}\n                className={confirmPasswordClasses}\n                onChange={confirmPasswordChangeHandler}\n                onBlur={confirmPasswordBlurHandler}\n                value={enteredConfirmPassword}\n              />\n              <span\n                className=\"input-group-text\"\n                onClick={toggleConfirmPassword}\n              >\n                {confirmPassword === true ? <BsEyeFill /> : <BsEyeSlashFill />}\n              </span>\n\n              {confirmPasswordInputHasError && (\n                <Form.Control.Feedback type=\"invalid\">\n                Must contain more than 8 characters which contain at\n                          least one lowercase letter, one uppercase letter, one\n                          numeric digit, and one special character.\n                </Form.Control.Feedback>\n              )}\n            </div>\n          </Col>\n\n          <Col className=\"text-end\">\n            <button type=\"submit\" className=\"btn btn-primary\" disabled={!changePasswordIsValid}>\n              Save\n            </button>\n          </Col>\n        </Form>\n      </Col>\n    </div>\n  );\n}\n\nexport default Password;\n"]},"metadata":{},"sourceType":"module"}